/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query LessonComments($relation: String!) {\n    findAllInHierarchy(\n        relation: $relation\n        filters: {blocked: {eq: false}, blockedThread: {eq: false}}\n    ) {\n        content\n        id\n        author {\n            name\n            avatar\n        }\n        tab\n        createdAt\n        children {\n            id\n            content\n            author {\n                name\n                avatar\n            }\n            createdAt\n            tab\n            children {\n                id\n                author {\n                    name\n                    avatar\n                }\n                content\n                children {\n                    id\n                }\n            }\n        }\n    }\n}\n": types.LessonCommentsDocument,
    "\nmutation createComment(\n    $relation: String!\n    $content: String!\n    $threadOf: Id\n    $tab: String!\n) {\n    createComment(\n        input: {\n            relation: $relation\n            content: $content\n            threadOf: $threadOf\n            tab: $tab\n        }\n    ) {\n        id\n    }\n}\n": types.CreateCommentDocument,
    "\nquery CourseOverview($courseId: ID) {\n    course(id: $courseId) {\n        data {\n            attributes {\n                Title\n                course_sections {\n                    data {\n                        attributes {\n                            Title\n                            lessons {\n                                data {\n                                    attributes {\n                                        Title\n                                        Summary\n                                        api_video_uploader_api_video_asset {\n                                            data {\n                                                attributes {\n                                                    videoId\n                                                }\n                                            }\n                                        }\n                                        index\n                                    }\n                                    id\n                                }\n                            }\n                            index\n                        }\n                        id\n                    }\n                }\n                intro_video {\n                    data {\n                        id\n                        attributes {\n                            videoId\n                        }\n                    }\n                }\n                Summary\n            }\n            id\n        }\n    }\n}\n": types.CourseOverviewDocument,
    "\n  query CourseIds {\n    courses {\n      data {\n        id\n      }\n    }\n  }\n": types.CourseIdsDocument,
    "\nquery CompletedCourseLessons($userId: ID!, $courseId: ID!) {\n    usersPermissionsUser(id: $userId) {\n        data {\n            attributes {\n                lessons_completed(filters: {course_section: {course: {id: {eq: $courseId}}}}) {\n                    data {\n                        id\n                        attributes {\n                            index\n                            course_section {\n                                data {\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                courses_approveds(filters: {id: {eq: $courseId}}) {\n                    data {\n                        id\n                    }\n                }\n            }\n        }\n    }\n}\n": types.CompletedCourseLessonsDocument,
    "\nquery Courses {\n    courses {\n        data {\n            id\n            attributes {\n                Title\n                Summary\n                required_role\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            lessons {\n                                data {\n                                    id\n                                    attributes {\n                                        lesson_minutes\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                CoverImage {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n                authors {\n                    data {\n                        attributes {\n                            Name\n                            twitter\n                            linkedin\n                            instagram\n                            Description\n                            picture {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                AuthorDescription\n                Icon {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n": types.CoursesDocument,
    "\n  query Lesson($courseId: ID!, $sectionIndex: Int!, $lessonIndex: Int!) {\n    lessons(\n        filters: {course_section: {course: {id: {eq: $courseId}}, index: {eq: $sectionIndex}}, index: {eq: $lessonIndex}}\n    ) {\n        data {\n            attributes {\n                Title\n                Summary\n                Content\n                Transcript\n                index\n                createdAt\n                updatedAt\n                publishedAt\n                course_section {\n                    data {\n                        attributes {\n                            Title\n                            Summary\n                            index\n                            course {\n                                data {\n                                    attributes {\n                                        Title\n                                        Summary\n                                        required_role\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                api_video_uploader_api_video_asset {\n                    data {\n                        attributes {\n                            title\n                            description\n                            videoId\n                        }\n                    }\n                }\n            }\n            id\n        }\n    }\n }\n": types.LessonDocument,
    "\n  query LessonIds {\n    courses {\n        data {\n            id\n            attributes {\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            index\n                            lessons {\n                                data {\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n }\n": types.LessonIdsDocument,
    "\nquery CourseLessonIds($courseId: ID!) {\n    courses(filters: { id: { eq: $courseId } }) {\n        data {\n            id\n            attributes {\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            index\n                            lessons {\n                                data {\n                                    id\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n": types.CourseLessonIdsDocument,
    "\nquery UsersPermissionsUser($userId: ID) {\n    usersPermissionsUser(id: $userId) {\n        data {\n            attributes {\n                current_lesson {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            Summary\n                            index\n                            course_section {\n                                data {\n                                    attributes {\n                                        index\n                                        course {\n                                            data {\n                                                attributes {\n                                                    Title\n                                                }\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            api_video_uploader_api_video_asset {\n                                data {\n                                    attributes {\n                                        videoId\n                                        thumbnail\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n": types.UsersPermissionsUserDocument,
    "\nquery getProfile($id: ID!) {\n    usersPermissionsUser(id: $id) {\n        data {\n            id\n            attributes {\n                courses_enrolled {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            course_sections {\n                                data {\n                                    attributes {\n                                        lessons {\n                                            data {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            Icon {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                lessons_completed {\n                    data {\n                        id\n                        attributes {\n                            course_section {\n                                data {\n                                    attributes {\n                                        course {\n                                            data {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            lesson_minutes\n                        }\n                    }\n                }\n                achievements {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            Description\n                            icon {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                courses_approveds {\n                    data {\n                        id\n                    }\n                }\n            }\n        }\n    }\n    turtleOfTheMonth {\n        data {\n            id\n            attributes {\n                Name\n                Image {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n": types.GetProfileDocument,
    "query userWalletPassword($walletAddress: String!) {\n    usersPermissionsUsers(filters: {walletAddress: {eq: $walletAddress}}) {\n        data {\n            id\n            attributes {\n                email\n                user_wallet_password {\n                    data {\n                        id\n                        attributes {\n                            password\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n": types.UserWalletPasswordDocument,
    "mutation CreateWalletUser($wallet: String!, $email: String!, $password: String!) {\n    createUsersPermissionsUser(\n        data: {username: $wallet, email: $email, confirmed: true, password: $password, walletAddress: $wallet role: \"1\"}\n    ) {\n        data {\n            id\n        }\n    }\n}\n": types.CreateWalletUserDocument,
    "mutation saveWalletPassword($userId: Id!, $password: String!) {\n    createUserWalletPassword(data: {user: $userId, password: $password}) {\n        data {\n            id\n        }\n    }\n}\n": types.SaveWalletPasswordDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query LessonComments($relation: String!) {\n    findAllInHierarchy(\n        relation: $relation\n        filters: {blocked: {eq: false}, blockedThread: {eq: false}}\n    ) {\n        content\n        id\n        author {\n            name\n            avatar\n        }\n        tab\n        createdAt\n        children {\n            id\n            content\n            author {\n                name\n                avatar\n            }\n            createdAt\n            tab\n            children {\n                id\n                author {\n                    name\n                    avatar\n                }\n                content\n                children {\n                    id\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["query LessonComments($relation: String!) {\n    findAllInHierarchy(\n        relation: $relation\n        filters: {blocked: {eq: false}, blockedThread: {eq: false}}\n    ) {\n        content\n        id\n        author {\n            name\n            avatar\n        }\n        tab\n        createdAt\n        children {\n            id\n            content\n            author {\n                name\n                avatar\n            }\n            createdAt\n            tab\n            children {\n                id\n                author {\n                    name\n                    avatar\n                }\n                content\n                children {\n                    id\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation createComment(\n    $relation: String!\n    $content: String!\n    $threadOf: Id\n    $tab: String!\n) {\n    createComment(\n        input: {\n            relation: $relation\n            content: $content\n            threadOf: $threadOf\n            tab: $tab\n        }\n    ) {\n        id\n    }\n}\n"): (typeof documents)["\nmutation createComment(\n    $relation: String!\n    $content: String!\n    $threadOf: Id\n    $tab: String!\n) {\n    createComment(\n        input: {\n            relation: $relation\n            content: $content\n            threadOf: $threadOf\n            tab: $tab\n        }\n    ) {\n        id\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery CourseOverview($courseId: ID) {\n    course(id: $courseId) {\n        data {\n            attributes {\n                Title\n                course_sections {\n                    data {\n                        attributes {\n                            Title\n                            lessons {\n                                data {\n                                    attributes {\n                                        Title\n                                        Summary\n                                        api_video_uploader_api_video_asset {\n                                            data {\n                                                attributes {\n                                                    videoId\n                                                }\n                                            }\n                                        }\n                                        index\n                                    }\n                                    id\n                                }\n                            }\n                            index\n                        }\n                        id\n                    }\n                }\n                intro_video {\n                    data {\n                        id\n                        attributes {\n                            videoId\n                        }\n                    }\n                }\n                Summary\n            }\n            id\n        }\n    }\n}\n"): (typeof documents)["\nquery CourseOverview($courseId: ID) {\n    course(id: $courseId) {\n        data {\n            attributes {\n                Title\n                course_sections {\n                    data {\n                        attributes {\n                            Title\n                            lessons {\n                                data {\n                                    attributes {\n                                        Title\n                                        Summary\n                                        api_video_uploader_api_video_asset {\n                                            data {\n                                                attributes {\n                                                    videoId\n                                                }\n                                            }\n                                        }\n                                        index\n                                    }\n                                    id\n                                }\n                            }\n                            index\n                        }\n                        id\n                    }\n                }\n                intro_video {\n                    data {\n                        id\n                        attributes {\n                            videoId\n                        }\n                    }\n                }\n                Summary\n            }\n            id\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CourseIds {\n    courses {\n      data {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query CourseIds {\n    courses {\n      data {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery CompletedCourseLessons($userId: ID!, $courseId: ID!) {\n    usersPermissionsUser(id: $userId) {\n        data {\n            attributes {\n                lessons_completed(filters: {course_section: {course: {id: {eq: $courseId}}}}) {\n                    data {\n                        id\n                        attributes {\n                            index\n                            course_section {\n                                data {\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                courses_approveds(filters: {id: {eq: $courseId}}) {\n                    data {\n                        id\n                    }\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery CompletedCourseLessons($userId: ID!, $courseId: ID!) {\n    usersPermissionsUser(id: $userId) {\n        data {\n            attributes {\n                lessons_completed(filters: {course_section: {course: {id: {eq: $courseId}}}}) {\n                    data {\n                        id\n                        attributes {\n                            index\n                            course_section {\n                                data {\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                courses_approveds(filters: {id: {eq: $courseId}}) {\n                    data {\n                        id\n                    }\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Courses {\n    courses {\n        data {\n            id\n            attributes {\n                Title\n                Summary\n                required_role\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            lessons {\n                                data {\n                                    id\n                                    attributes {\n                                        lesson_minutes\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                CoverImage {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n                authors {\n                    data {\n                        attributes {\n                            Name\n                            twitter\n                            linkedin\n                            instagram\n                            Description\n                            picture {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                AuthorDescription\n                Icon {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery Courses {\n    courses {\n        data {\n            id\n            attributes {\n                Title\n                Summary\n                required_role\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            lessons {\n                                data {\n                                    id\n                                    attributes {\n                                        lesson_minutes\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                CoverImage {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n                authors {\n                    data {\n                        attributes {\n                            Name\n                            twitter\n                            linkedin\n                            instagram\n                            Description\n                            picture {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                AuthorDescription\n                Icon {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Lesson($courseId: ID!, $sectionIndex: Int!, $lessonIndex: Int!) {\n    lessons(\n        filters: {course_section: {course: {id: {eq: $courseId}}, index: {eq: $sectionIndex}}, index: {eq: $lessonIndex}}\n    ) {\n        data {\n            attributes {\n                Title\n                Summary\n                Content\n                Transcript\n                index\n                createdAt\n                updatedAt\n                publishedAt\n                course_section {\n                    data {\n                        attributes {\n                            Title\n                            Summary\n                            index\n                            course {\n                                data {\n                                    attributes {\n                                        Title\n                                        Summary\n                                        required_role\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                api_video_uploader_api_video_asset {\n                    data {\n                        attributes {\n                            title\n                            description\n                            videoId\n                        }\n                    }\n                }\n            }\n            id\n        }\n    }\n }\n"): (typeof documents)["\n  query Lesson($courseId: ID!, $sectionIndex: Int!, $lessonIndex: Int!) {\n    lessons(\n        filters: {course_section: {course: {id: {eq: $courseId}}, index: {eq: $sectionIndex}}, index: {eq: $lessonIndex}}\n    ) {\n        data {\n            attributes {\n                Title\n                Summary\n                Content\n                Transcript\n                index\n                createdAt\n                updatedAt\n                publishedAt\n                course_section {\n                    data {\n                        attributes {\n                            Title\n                            Summary\n                            index\n                            course {\n                                data {\n                                    attributes {\n                                        Title\n                                        Summary\n                                        required_role\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                api_video_uploader_api_video_asset {\n                    data {\n                        attributes {\n                            title\n                            description\n                            videoId\n                        }\n                    }\n                }\n            }\n            id\n        }\n    }\n }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LessonIds {\n    courses {\n        data {\n            id\n            attributes {\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            index\n                            lessons {\n                                data {\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n }\n"): (typeof documents)["\n  query LessonIds {\n    courses {\n        data {\n            id\n            attributes {\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            index\n                            lessons {\n                                data {\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery CourseLessonIds($courseId: ID!) {\n    courses(filters: { id: { eq: $courseId } }) {\n        data {\n            id\n            attributes {\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            index\n                            lessons {\n                                data {\n                                    id\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery CourseLessonIds($courseId: ID!) {\n    courses(filters: { id: { eq: $courseId } }) {\n        data {\n            id\n            attributes {\n                course_sections {\n                    data {\n                        id\n                        attributes {\n                            index\n                            lessons {\n                                data {\n                                    id\n                                    attributes {\n                                        index\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery UsersPermissionsUser($userId: ID) {\n    usersPermissionsUser(id: $userId) {\n        data {\n            attributes {\n                current_lesson {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            Summary\n                            index\n                            course_section {\n                                data {\n                                    attributes {\n                                        index\n                                        course {\n                                            data {\n                                                attributes {\n                                                    Title\n                                                }\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            api_video_uploader_api_video_asset {\n                                data {\n                                    attributes {\n                                        videoId\n                                        thumbnail\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery UsersPermissionsUser($userId: ID) {\n    usersPermissionsUser(id: $userId) {\n        data {\n            attributes {\n                current_lesson {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            Summary\n                            index\n                            course_section {\n                                data {\n                                    attributes {\n                                        index\n                                        course {\n                                            data {\n                                                attributes {\n                                                    Title\n                                                }\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            api_video_uploader_api_video_asset {\n                                data {\n                                    attributes {\n                                        videoId\n                                        thumbnail\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getProfile($id: ID!) {\n    usersPermissionsUser(id: $id) {\n        data {\n            id\n            attributes {\n                courses_enrolled {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            course_sections {\n                                data {\n                                    attributes {\n                                        lessons {\n                                            data {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            Icon {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                lessons_completed {\n                    data {\n                        id\n                        attributes {\n                            course_section {\n                                data {\n                                    attributes {\n                                        course {\n                                            data {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            lesson_minutes\n                        }\n                    }\n                }\n                achievements {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            Description\n                            icon {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                courses_approveds {\n                    data {\n                        id\n                    }\n                }\n            }\n        }\n    }\n    turtleOfTheMonth {\n        data {\n            id\n            attributes {\n                Name\n                Image {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n"): (typeof documents)["\nquery getProfile($id: ID!) {\n    usersPermissionsUser(id: $id) {\n        data {\n            id\n            attributes {\n                courses_enrolled {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            course_sections {\n                                data {\n                                    attributes {\n                                        lessons {\n                                            data {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            Icon {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                lessons_completed {\n                    data {\n                        id\n                        attributes {\n                            course_section {\n                                data {\n                                    attributes {\n                                        course {\n                                            data {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            lesson_minutes\n                        }\n                    }\n                }\n                achievements {\n                    data {\n                        id\n                        attributes {\n                            Title\n                            Description\n                            icon {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                courses_approveds {\n                    data {\n                        id\n                    }\n                }\n            }\n        }\n    }\n    turtleOfTheMonth {\n        data {\n            id\n            attributes {\n                Name\n                Image {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query userWalletPassword($walletAddress: String!) {\n    usersPermissionsUsers(filters: {walletAddress: {eq: $walletAddress}}) {\n        data {\n            id\n            attributes {\n                email\n                user_wallet_password {\n                    data {\n                        id\n                        attributes {\n                            password\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["query userWalletPassword($walletAddress: String!) {\n    usersPermissionsUsers(filters: {walletAddress: {eq: $walletAddress}}) {\n        data {\n            id\n            attributes {\n                email\n                user_wallet_password {\n                    data {\n                        id\n                        attributes {\n                            password\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateWalletUser($wallet: String!, $email: String!, $password: String!) {\n    createUsersPermissionsUser(\n        data: {username: $wallet, email: $email, confirmed: true, password: $password, walletAddress: $wallet role: \"1\"}\n    ) {\n        data {\n            id\n        }\n    }\n}\n"): (typeof documents)["mutation CreateWalletUser($wallet: String!, $email: String!, $password: String!) {\n    createUsersPermissionsUser(\n        data: {username: $wallet, email: $email, confirmed: true, password: $password, walletAddress: $wallet role: \"1\"}\n    ) {\n        data {\n            id\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation saveWalletPassword($userId: Id!, $password: String!) {\n    createUserWalletPassword(data: {user: $userId, password: $password}) {\n        data {\n            id\n        }\n    }\n}\n"): (typeof documents)["mutation saveWalletPassword($userId: Id!, $password: String!) {\n    createUserWalletPassword(data: {user: $userId, password: $password}) {\n        data {\n            id\n        }\n    }\n}\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;